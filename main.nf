#!/usr/bin/env nextflow
/*
========================================================================================
                         nf-core/hpcmeta
========================================================================================
 nf-core/hpcmeta Analysis Pipeline.
 #### Homepage / Documentation
 https://github.com/nf-core/hpcmeta
----------------------------------------------------------------------------------------
*/

def helpMessage() {
    // TODO nf-core: Add to this help message with new command line parameters
    log.info nfcoreHeader()
    log.info"""

    Usage:

    The typical command for running the pipeline is as follows:

    nextflow run nf-core/hpcmeta --reads '*_R{1,2}.fastq.gz' -profile docker

    Mandatory arguments:
      --reads                       Path to input data (must be surrounded with quotes)
      -profile                      Configuration profile to use. Can use multiple (comma separated)
                                    Available: conda, docker, singularity, awsbatch, test and more.

    Options:
      --singleEnd                   Specifies that the input is single end reads

    References                      If not specified in the configuration file or you wish to overwrite any of the references.
      --host                        Path to host database

    Other options:
      --outdir                      The output directory where the results will be saved
      --email                       Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits
      --email_on_fail               Same as --email, except only send mail if the workflow is not successful
      --maxMultiqcEmailFileSize     Theshold size for MultiQC report to be attached in notification email. If file generated by pipeline exceeds the threshold, it will not be attached (Default: 25MB)
      -name                         Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic.

    AWSBatch options:
      --awsqueue                    The AWSBatch JobQueue that needs to be set when running on AWSBatch
      --awsregion                   The AWS Region for your AWS Batch job to run on
    """.stripIndent()
}

// Show help message
if (params.help) {
    helpMessage()
    exit 0
}

/*
 * SANITY CHECKS
 */

if (params.assembler != 'megahit' && params.assembler != 'metaspades') exit 1, "Unknown value for params.assembler"
if (params.includeRemoveHost && ! params.host) exit 1, "Must provide params.host in combination with params.includeRemoveHost"


// Check if genome exists in the config file
// if (params.genomes && params.genome && !params.genomes.containsKey(params.genome)) {
//     exit 1, "The provided genome '${params.genome}' is not available in the iGenomes file. Currently the available genomes are ${params.genomes.keySet().join(", ")}"
// }


// TODO nf-core: Add any reference files that are needed
// Configurable reference genomes
//
// NOTE - THIS IS NOT USED IN THIS PIPELINE, EXAMPLE ONLY
// If you want to use the channel below in a process, define the following:
//   input:
//   file fasta from ch_fasta
//
params.fasta = params.genome ? params.genomes[ params.genome ].fasta ?: false : false
if (params.fasta) { ch_fasta = file(params.fasta, checkIfExists: true) }

// Has the run name been specified by the user?
//  this has the bonus effect of catching both -name and --name
custom_runName = params.name
if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {
  custom_runName = workflow.runName
}

if ( workflow.profile == 'awsbatch') {
  // AWSBatch sanity checking
  if (!params.awsqueue || !params.awsregion) exit 1, "Specify correct --awsqueue and --awsregion parameters on AWSBatch!"
  // Check outdir paths to be S3 buckets if running on AWSBatch
  // related: https://github.com/nextflow-io/nextflow/issues/813
  if (!params.outdir.startsWith('s3:')) exit 1, "Outdir not on S3 - specify S3 Bucket to run on AWSBatch!"
  // Prevent trace files to be stored on S3 since S3 does not support rolling files.
  if (workflow.tracedir.startsWith('s3:')) exit 1, "Specify a local tracedir or run without trace! S3 cannot be used for tracefiles."
}

// Stage config files
ch_multiqc_config = file(params.multiqc_config, checkIfExists: true)
ch_output_docs = file("$baseDir/docs/output.md", checkIfExists: true)

/*
 * Create a channel for input read files
 */
if (params.readPaths) {
    if (params.singleEnd) {
        Channel
            .from(params.readPaths)
            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true) ] ] }
            .ifEmpty { exit 1, "params.readPaths was empty - no input files supplied" }
            .into { read_files_trimming }
    } else {
        Channel
            .from(params.readPaths)
            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true), file(row[1][1], checkIfExists: true) ] ] }
            .ifEmpty { exit 1, "params.readPaths was empty - no input files supplied" }
            .into { read_files_trimming }
    }
} else {
    Channel
        .fromFilePairs( params.reads, size: params.singleEnd ? 1 : 2 )
        .ifEmpty { exit 1, "Cannot find any reads matching: ${params.reads}\nNB: Path needs to be enclosed in quotes!\nIf this is single-end data, please specify --singleEnd on the command line." }
        .into { read_files_trimming }
}

// take care of the host genome

params.genomesDir   = "${workflow.workDir}/HostGenome-nf-produced"
genomeStore                 = params.genomesDir

if (params.includeRemoveHost &&  params.host) { 
   genomeFile                  = file(params.host)
   genomePrefix                = genomeFile.getBaseName()
}


// Header log info
log.info nfcoreHeader()
def summary = [:]
if (workflow.revision) summary['Pipeline Release'] = workflow.revision
summary['Run Name']         = custom_runName ?: workflow.runName
// TODO nf-core: Report custom parameters here
summary['Reads']            = params.reads
summary['Data Type']        = params.singleEnd ? 'Single-End' : 'Paired-End'
if (params.includeRemoveHost &&  params.host) {
   summary['Remove Host']      = params.includeRemoveHost
   summary['RefGenome Host']   = params.host
}
summary['Max Resources']    = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
if (workflow.containerEngine) summary['Container'] = "$workflow.containerEngine - $workflow.container"
summary['Output dir']       = params.outdir
summary['Launch dir']       = workflow.launchDir
summary['Working dir']      = workflow.workDir
summary['Script dir']       = workflow.projectDir
summary['User']             = workflow.userName
if (workflow.profile == 'awsbatch') {
  summary['AWS Region']     = params.awsregion
  summary['AWS Queue']      = params.awsqueue
}
summary['Config Profile'] = workflow.profile
if (params.config_profile_description) summary['Config Description'] = params.config_profile_description
if (params.config_profile_contact)     summary['Config Contact']     = params.config_profile_contact
if (params.config_profile_url)         summary['Config URL']         = params.config_profile_url
if (params.email || params.email_on_fail) {
  summary['E-mail Address']    = params.email
  summary['E-mail on failure'] = params.email_on_fail
  summary['MultiQC maxsize']   = params.maxMultiqcEmailFileSize
}
log.info summary.collect { k,v -> "${k.padRight(18)}: $v" }.join("\n")
log.info "-\033[2m--------------------------------------------------\033[0m-"

// Check the hostnames against configured profiles
checkHostname()

def create_workflow_summary(summary) {
    def yaml_file = workDir.resolve('workflow_summary_mqc.yaml')
    yaml_file.text  = """
    id: 'nf-core-hpcmeta-summary'
    description: " - this information is collected when the pipeline is started."
    section_name: 'nf-core/hpcmeta Workflow Summary'
    section_href: 'https://github.com/nf-core/hpcmeta'
    plot_type: 'html'
    data: |
        <dl class=\"dl-horizontal\">
${summary.collect { k,v -> "            <dt>$k</dt><dd><samp>${v ?: '<span style=\"color:#999999;\">N/A</a>'}</samp></dd>" }.join("\n")}
        </dl>
    """.stripIndent()

   return yaml_file
}

/*
 * Parse software version numbers
 */
// process get_software_versions {
//     publishDir "${params.outdir}/pipeline_info", mode: 'copy',
//         saveAs: { filename ->
//             if (filename.indexOf(".csv") > 0) filename
//             else null
//         }
// 
//     output:
//     file 'software_versions_mqc.yaml' into software_versions_yaml
//     file "software_versions.csv"
// 
//     script:
//     // TODO nf-core: Get all tools to print their version number here
//     """
//     echo $workflow.manifest.version > v_pipeline.txt
//     echo $workflow.nextflow.version > v_nextflow.txt
//     fastqc --version > v_fastqc.txt
//     multiqc --version > v_multiqc.txt
//     scrape_software_versions.py &> software_versions_mqc.yaml
//     """
// }

// process fastqc {
//    tag "FASTQC-${id}"
//    label 'process_low'
//    publishDir "${params.outdir}/fastqc", mode: 'copy',
//        saveAs: { filename -> filename.indexOf(".zip") > 0 ? "zips/$filename" : "$filename" }
//
//    input:
//    set val(id), file(reads) from read_files_fastqc
//
//    output:
//    file "*_fastqc.{zip,html}" into fastqc_results
//
//    script:
//    """
//    fastqc --quiet --threads $task.cpus $reads
//    """
//}
//


/*
* Step 2. FASTP
*/

process fastp {
    tag "fastp-${id}"
	label 'process_low'
    publishDir "${params.outdir}/Trimmed-Reads-FastP", mode: 'link'

    input:
    set val(id), file(reads) from read_files_trimming

    output:
    set val(id), file("*.qualtrim.fastq.gz") into trimmedToFilter, trimmedAssembly, trimmedHUMANN2, trimmedKraken, trimmedMetaphlan, trimmedbwaAln
    file "*.html"
    file "*.json" into trimmedMultiQC

    script:
    if (params.singleEnd) {
        """
        fastp -i ${reads[0]} \\
            -o ${id}.R1.qualtrim.fastq.gz \\
            --failed_out ${id}.R1.failed.fastq.gz \\
            --thread ${task.cpus} \\
            --html ${id}.fastp.html \\
            --json ${id}.fastp.json \\
            ${params.fastpOptions} > ${id}.trimmomatic.runlog 2>&1
        """
    } else {
        """
        fastp -i ${reads[0]} -I ${reads[1]} \\
            -o ${id}.R1.qualtrim.fastq.gz \\
            -O ${id}.R2.qualtrim.fastq.gz \\
            --unpaired1 ${id}.R1.unpaired.fastq.gz \\
            --unpaired2 ${id}.R2.unpaired.fastq.gz \\
            --failed_out ${id}.failed.fastq.gz \\
            --html ${id}.fastp.html \\
            --json ${id}.fastp.json \\
            --thread ${task.cpus} \\
            ${params.fastpOptions} > ${id}.trimmomatic.runlog 2>&1
        """
    }
}

/*
* Step 3. FASTQC on trimmed files
*/

//process fastqc_post {
//    tag "FASTQC-post-${name}"
//    label 'process_low'
//    publishDir "${params.outdir}/fastqc-post", mode: 'copy',
//        saveAs: { filename -> filename.indexOf(".zip") > 0 ? "zips/$filename" : "$filename" }
//
//    input:
//    set val(name), file(reads) from trimmedFASTQC
//
//    output:
//    file "*_fastqc.{zip,html}" into fastqc_post_results
//
//    script:
//    """
//    fastqc --quiet --threads $task.cpus $reads
//    """
//}
//
//

/*
 * Step 4: Remove host DNA
 */


 if (params.includeRemoveHost && params.host) {

     process bowtie_Index_kneaddata {
         tag                    { gf }
         storeDir               genomeStore
     
         input:
         file gf from genomeFile
     
         output:
         file "*.bt2"  into bowtieIdxToFilter
     
         script:
         """
         bowtie2-build  --quiet  --threads ${task.cpus}  -f ${gf}  ${genomePrefix} 
         """
     }



     process kneaddata {
         publishDir "${params.outdir}/Host-Filtered", mode: "link"
 
         input:
         set pair_id, file(reads)  from trimmedToFilter
         file RefIndex from bowtieIdxToFilter
 
         output:
         set pair_id, file("${pair_id}/*paired_1.fastq.gz"), file("${pair_id}/*paired_2.fastq.gz") into filterToMerge
         file("${pair_id}/*unmatched_{1,2}.fastq.gz")
         file("${pair_id}/*contam_{1,2}.fastq.gz")
         file("${pair_id}/*kneaddata.log")
 
         """
         kneaddata --input ${reads[0]} --input ${reads[1]} \
             --reference-db ${genomePrefix} \
             --output ${pair_id} \
             --bypass-trim \
             --threads ${task.cpus}
 
         pigz -p ${task.cpus} ${pair_id}/*.fastq
         """
     }
}

/*
 * Step 4: VSEARCH FASTQ Merging
 */

// TODO: add support
// if (false)  {
//     process vsearchMergePairs {
//         executor 'slurm'
//         cpus 12
//         queue 'normal'
//         memory '12 GB'
//         module vsearchMod,pigzMod
//         publishDir "${params.outdir}/MergePairs", mode: "link"
// 
//         input:
//         set pair_id, file(read1), file(read2) from filterToMerge
// 
//         output:
//         set pair_id, file("*.merged.fastq.gz") into mergedReads,mergedToCombine
//         file("*.unmerged.R1.fastq.gz") into unmergedR1
//         file("*.unmerged.R2.fastq.gz") into unmergedR2
//         file("*.merged.log")
//         file("*.summary.log")
// 
//         """
//         vsearch --fastq_mergepairs \
//             ${read1} \
//             --reverse ${read2} \
//             --threads ${task.cpus} \
//             --fastqout ${pair_id}.merged.fastq \
//             --fastqout_notmerged_fwd ${pair_id}.unmerged.R1.fastq \
//             --fastqout_notmerged_rev ${pair_id}.unmerged.R2.fastq \
//             --eetabbedout ${pair_id}.merged.log > ${pair_id}.summary.log 2>&1
// 
//         pigz -p ${task.cpus} *.fastq
//         """
//     }
//     /*
//     * Step 5. FASTQC on merged files
//     */
// 
//     process runFASTQCMerged {
//         executor 'slurm'
//         cpus 4
//         queue 'lowmem'
//         memory '24 GB'
//         module fastqcMod
//         publishDir "${params.outdir}/FASTQC-Merged", mode: 'link'
// 
//         input:
//         set pair_id, file(mergedReads) from mergedReads
// 
//         output:
//         file "*fastqc.{html,zip}"
// 
//         """
//         fastqc -t ${task.cpus} --noextract ${mergedReads}
//         """
//     }
//     
//     process combineReads {
//         executor 'slurm'
//         cpus 1
//         queue 'normal'
//         memory '4 GB'
//         module multiQCMod
//         publishDir "${params.outdir}/Combined-Reads", mode: "link"
// 
//         input:
//         set pair_id, file(reads) from mergedToCombine
//         file(unmerged) from unmergedR1
// 
//         output:
//         set pair_id, file("*.combined.fastq.gz") into filteredReadsToHUMANn2,filteredReadsToMetaPhlan2,filteredReadsToCentrifuge
// 
//         """
//         cat ${reads} ${unmerged} > ${pair_id}.combined.fastq.gz
//         """
//     }
// 
// } else {
//     // TODO: make empty channels
// }


/*
 * Step 6: MultiQC
 */

// process multiqc {
//     publishDir "${params.outdir}/MultiQC", mode: 'copy'
// 
//     input:
//     file multiqc_config from ch_multiqc_config
//     // TODO nf-core: Add in log files from your new processes for MultiQC to find!
//     
//     file ("fastqc/*") from fastqc_results.collect().ifEmpty([])
//     file ("software_versions/*") from software_versions_yaml.collect()
//     file workflow_summary from create_workflow_summary(summary)
// 
//     output:
//     file "*multiqc_report.html" into multiqc_report
//     file "*_data"
//     file "multiqc_plots"
// 
//     script:
//     rtitle = custom_runName ? "--title \"$custom_runName\"" : ''
//     rfilename = custom_runName ? "--filename " + custom_runName.replaceAll('\\W','_').replaceAll('_+','_') + "_multiqc_report" : ''
//     // TODO nf-core: Specify which MultiQC modules to use with -m for a faster run time
//     """
//     multiqc -f $rtitle $rfilename --config $multiqc_config .
//     """
// }

// process runMultiQC {
//    executor 'slurm'
//    cpus 1
//    queue 'normal'
//    memory '4 GB'
//    module multiQCMod
//    publishDir "${params.outdir}/MultiQC", mode: "link"
// 
//    input:
//    file ('RawFASTQC/*') from rawFastqcResults.collect()
//    file ('Trimmomatic/*') from trimmedFastqLogs.collect()
//    file ('TrimmedFASTQC/*') from trimmedFastqcResults.collect()
// 
//    output:
//    file '*multiqc_report.html' into multiqc_report
//    file '*_data' into multiqc_data
//    file '.command.err' into multiqc_stderr
// 
//    """
//    multiqc . -f -d -m fastqc -m trimmomatic
//    """
// }


process multiqc {
    publishDir "${params.outdir}/MultiQC_ReadPrep", mode: 'copy'

    input:
    file('*') from trimmedMultiQC.collect()

    output:
    file "*"

    script:    
    """
    multiqc .
    """

}

/*
 * Step 6: Combine Reads - we keep merged reads and unmerged R1
 */


// TODO: add PE read support
if (params.runMetaPhlan2) {

    process metaphlan2 {
        tag "Metaphlan2-${pair_id}"
        label 'process_high'
        publishDir "${params.outdir}/MetaPhlan2", mode: "link"

        input:
        set val(pair_id), file(freads) from trimmedMetaphlan2

        output:
        file("${pair_id}/*")

        script:
        runMetaPhlan2params = params.runMetaPhlan2_opts ? params.runMetaPhlan2_opts : ''
        """
        metaphlan2.py ${freads} \
            --bowtie2out ${pair_id}.bowtie2.bz2 \
            --nproc ${task.cpus} \
            --input_type fastq \
            --biom {pair_id}.biom \
            --tmp_dir /scratch \
            -o ${pair_id}.profile.txt
        """
    }
}

// if (params.runHUMANN2) {
// 
//     process metaphlan2 {
//         executor 'slurm'
//         cpus 24
//         queue 'normal'
//         memory '72 GB'
//         module humann2Mod
//         publishDir "${params.outdir}/HUMANn2", mode: "link"
// 
//         input:
//         set pair_id, file(freads) from filteredReadsToMetaPhlan2
// 
//         output:
//         file("${pair_id}/*")
// 
//         """
//         metaphlan2.py ${freads} \
//             --bowtie2out ${pair_id}.bowtie2.bz2 \
//             --nproc ${task.cpus} \
//             --input_type fastq \
//             --biom {pair_id}.biom \
//             --tmp_dir /scratch \
//             -o ${pair_id}.profile.txt
//         """
//     }
// 
// }

// if (params.runKraken2) {
// 
//     process kraken2 {
//         executor 'slurm'
//         cpus 24
//         queue 'normal'
//         memory '72 GB'
//         module krakenMod
//         publishDir "${params.outdir}/Kraken2", mode: "link"
// 
//         input:
//         set pair_id, file(freads) from filteredReadsToMetaPhlan2
// 
//         output:
//         file("${pair_id}.profile.txt")
//         file("${pair_id}.bowtie2.bz2")
//         file("${pair_id}.biom")
// 
//         """
// 
//         """
//     }
// 
// }

if (params.runAssembly) {
    // TODO: add SE read support, adjust memory in process
    if (params.assembler == 'megahit') {
    
        process megahit {
            tag "MEGAHIT-${id}"
            label 'process_high'
            publishDir "${params.outdir}/MEGAHIT", mode: "link"

            input:
            set val(id), file(freads) from trimmedAssembly

            output:
            file("${id}/*")
            set val(id), file("${id}/final.contigs.fa") into assembly2diamond,assembly2bwaidx,assembly2MetaBAT2
    
            script:
            megahitparams = params.megahit_opts ? params.megahit_opts : ''
            """
            megahit \\
                -1 ${freads[0]} -2 ${freads[1]} \\
                -t ${task.cpus} \\
                -o ${id} ${megahitparams}
            """
        }
    }  
    if (params.assembler == 'metaspades') {

        process metaspades {
            tag "metaSPAdes-${id}"
            label 'process_high'
            publishDir "${params.outdir}/metaSPADES", mode: "link"

            input:
            set val(id), file(freads) from trimmedAssembly

            output:
            file("${id}/*")
            set val(id), file("${id}/scaffolds.fasta") into assembly2diamond,assembly2bwaidx,assembly2MetaBAT2
    
            script:
            metaspadesparams = params.metaspades_opts ? params.metaspades_opts : ''
            """
            metaspades.py -t ${task.cpus} \\
                -1 ${freads[0]} -2 ${freads[1]} \\
                -o ${id} ${metaspadesparams}
            """
        }
        
    } 
    
    if (params.diamondDB) {
    
        diamondDB = file(params.diamondDB)
        // note memory usage; DIAMOND typically requires considerable memory esp. 
        // for larger assemblies and databases (like nr)
        process diamond {
            tag "DIAMOND-${id}"
            publishDir "${params.outdir}/DIAMOND", mode: "link"
        
            input:
            set val(id), file(contigs) from assembly2diamond

            output:
            file("*.daa")
            file("*.log")
    
            script:
            """
            diamond blastx -p ${task.cpus} \\
                 -d ${diamondDB} \\
                 -q $contigs \\
                 -o ${id}.daa \\
                 --outfmt 100 \\
                 --tmpdir /dev/shm \\
                 --range-culling -F 25 \\
                 --top 5 \\
                 --evalue 1e-5 \\
                 --sensitive \\
                 -v 2> "${id}.log"
            """
        }
    }
     // next steps: index assembly, align reads to assembly, bin reads, run CheckM on bins, annotate assembly
   
    if (params.runMetaBAT) {
    
        process bwa_index {
            tag "bwa-index-${id}"
            publishDir "${params.outdir}/bwa-index", mode: "link"
        
            input:
            set val(id), file(contigs) from assembly2bwaidx

            output:
            file("${id}.*") into bwaindex
    
            script:
            """
            bwa index -p $id $contigs
            """
        }
        
        process bwa_aln {
            tag "bwa-aln-${id}"
            
            scratch "/scratch"
            
            input:
            set val(id), file(reads) from trimmedbwaAln
            file(idx) from bwaindex.collect()
            
            output:
            set val(id), file("${id}.sam") into bwa2samtools
    
            script:
            """
            bwa mem -t ${task.cpus} $id $reads > ${id}.sam 
            """
        }

        process samtools_sort {
            tag "samtools-${id}"
            publishDir "${params.outdir}/bwa-aln", mode: "link"
        
            input:
            set val(id), file(aln) from bwa2samtools

            output:
            //set val(id), file("${id}.sorted.bam*") into bwa2MetaBAT2
            set val(id), file("${id}.sorted.bam") into bwa2MetaBAT2
            file("${id}.sorted.bam.bai")
            file("${id}.stats.txt")
    
            script:
            """
            samtools sort -o ${id}.sorted.bam -@ ${task.cpus} $aln
            samtools index ${id}.sorted.bam
            samtools stats ${id}.sorted.bam > ${id}.stats.txt
            """
        }

        process metabat2_checkM {
            tag "metabat2_checkM-${id}"
            publishDir "${params.outdir}/metabat2-checkM", mode: "link"
        
            input:
            set val(id), file(aln) from bwa2MetaBAT2
            set val(id2), file(contigs) from assembly2MetaBAT2

            output:
            file("*")
                
            script:
            metabat2params = params.metabat2_opts ? params.metabat2_opts : ''
            """
            echo step one calculate depth
            
            jgi_summarize_bam_contig_depths \\
                --outputDepth ${id}.depth.txt $aln

            echo step two calculate bins with metabat2

            mkdir  ${id}_bins           
            metabat2 -i $contigs \\
                -t ${task.cpus} \\
                --unbinned \\
                -a ${id}.depth.txt \\
                -o ./${id}_bins/

            echo step three run checkm
            
            checkm lineage_wf \\
                -t ${task.cpus} -x fa \\
                ./${id}_bins/ ./${id}_CheckM

            """
        }
                
    }
}

/*
 * STEP 3 - Output Description HTML
 */
 
// process output_documentation {
//     publishDir "${params.outdir}/pipeline_info", mode: 'copy'
// 
//     input:
//     file output_docs from ch_output_docs
// 
//     output:
//     file "results_description.html"
// 
//     script:
//     """
//     markdown_to_html.r $output_docs results_description.html
//     """
// }

/*
 * Completion e-mail notification
 */
workflow.onComplete {

    // Set up the e-mail variables
    def subject = "[nf-core/hpcmeta] Successful: $workflow.runName"
    if (!workflow.success) {
      subject = "[nf-core/hpcmeta] FAILED: $workflow.runName"
    }
    def email_fields = [:]
    email_fields['version'] = workflow.manifest.version
    email_fields['runName'] = custom_runName ?: workflow.runName
    email_fields['success'] = workflow.success
    email_fields['dateComplete'] = workflow.complete
    email_fields['duration'] = workflow.duration
    email_fields['exitStatus'] = workflow.exitStatus
    email_fields['errorMessage'] = (workflow.errorMessage ?: 'None')
    email_fields['errorReport'] = (workflow.errorReport ?: 'None')
    email_fields['commandLine'] = workflow.commandLine
    email_fields['projectDir'] = workflow.projectDir
    email_fields['summary'] = summary
    email_fields['summary']['Date Started'] = workflow.start
    email_fields['summary']['Date Completed'] = workflow.complete
    email_fields['summary']['Pipeline script file path'] = workflow.scriptFile
    email_fields['summary']['Pipeline script hash ID'] = workflow.scriptId
    if (workflow.repository) email_fields['summary']['Pipeline repository Git URL'] = workflow.repository
    if (workflow.commitId) email_fields['summary']['Pipeline repository Git Commit'] = workflow.commitId
    if (workflow.revision) email_fields['summary']['Pipeline Git branch/tag'] = workflow.revision
    if (workflow.container) email_fields['summary']['Docker image'] = workflow.container
    email_fields['summary']['Nextflow Version'] = workflow.nextflow.version
    email_fields['summary']['Nextflow Build'] = workflow.nextflow.build
    email_fields['summary']['Nextflow Compile Timestamp'] = workflow.nextflow.timestamp

    // TODO nf-core: If not using MultiQC, strip out this code (including params.maxMultiqcEmailFileSize)
    // On success try attach the multiqc report
    def mqc_report = null
    try {
        if (workflow.success) {
            mqc_report = multiqc_report.getVal()
            if (mqc_report.getClass() == ArrayList) {
                log.warn "[nf-core/hpcmeta] Found multiple reports from process 'multiqc', will use only one"
                mqc_report = mqc_report[0]
            }
        }
    } catch (all) {
        log.warn "[nf-core/hpcmeta] Could not attach MultiQC report to summary email"
    }

    // Check if we are only sending emails on failure
    email_address = params.email
    if (!params.email && params.email_on_fail && !workflow.success) {
        email_address = params.email_on_fail
    }

    // Render the TXT template
    def engine = new groovy.text.GStringTemplateEngine()
    def tf = new File("$baseDir/assets/email_template.txt")
    def txt_template = engine.createTemplate(tf).make(email_fields)
    def email_txt = txt_template.toString()

    // Render the HTML template
    def hf = new File("$baseDir/assets/email_template.html")
    def html_template = engine.createTemplate(hf).make(email_fields)
    def email_html = html_template.toString()

    // Render the sendmail template
    def smail_fields = [ email: email_address, subject: subject, email_txt: email_txt, email_html: email_html, baseDir: "$baseDir", mqcFile: mqc_report, mqcMaxSize: params.maxMultiqcEmailFileSize.toBytes() ]
    def sf = new File("$baseDir/assets/sendmail_template.txt")
    def sendmail_template = engine.createTemplate(sf).make(smail_fields)
    def sendmail_html = sendmail_template.toString()

    // Send the HTML e-mail
    if (email_address) {
        try {
          if ( params.plaintext_email ){ throw GroovyException('Send plaintext e-mail, not HTML') }
          // Try to send HTML e-mail using sendmail
          [ 'sendmail', '-t' ].execute() << sendmail_html
          log.info "[nf-core/hpcmeta] Sent summary e-mail to $email_address (sendmail)"
        } catch (all) {
          // Catch failures and try with plaintext
          [ 'mail', '-s', subject, email_address ].execute() << email_txt
          log.info "[nf-core/hpcmeta] Sent summary e-mail to $email_address (mail)"
        }
    }

    // Write summary e-mail HTML to a file
    def output_d = new File( "${params.outdir}/pipeline_info/" )
    if (!output_d.exists()) {
      output_d.mkdirs()
    }
    def output_hf = new File( output_d, "pipeline_report.html" )
    output_hf.withWriter { w -> w << email_html }
    def output_tf = new File( output_d, "pipeline_report.txt" )
    output_tf.withWriter { w -> w << email_txt }

    c_reset = params.monochrome_logs ? '' : "\033[0m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_red = params.monochrome_logs ? '' : "\033[0;31m";

    if (workflow.stats.ignoredCount > 0 && workflow.success) {
      log.info "${c_purple}Warning, pipeline completed, but with errored process(es) ${c_reset}"
      log.info "${c_red}Number of ignored errored process(es) : ${workflow.stats.ignoredCount} ${c_reset}"
      log.info "${c_green}Number of successfully ran process(es) : ${workflow.stats.succeedCount} ${c_reset}"
    }

    if (workflow.success) {
        log.info "${c_purple}[nf-core/hpcmeta]${c_green} Pipeline completed successfully${c_reset}"
    } else {
        checkHostname()
        log.info "${c_purple}[nf-core/hpcmeta]${c_red} Pipeline completed with errors${c_reset}"
    }

}


def nfcoreHeader(){
    // Log colors ANSI codes
    c_reset = params.monochrome_logs ? '' : "\033[0m";
    c_dim = params.monochrome_logs ? '' : "\033[2m";
    c_black = params.monochrome_logs ? '' : "\033[0;30m";
    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_yellow = params.monochrome_logs ? '' : "\033[0;33m";
    c_blue = params.monochrome_logs ? '' : "\033[0;34m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_cyan = params.monochrome_logs ? '' : "\033[0;36m";
    c_white = params.monochrome_logs ? '' : "\033[0;37m";

    return """    -${c_dim}--------------------------------------------------${c_reset}-
                                            ${c_green},--.${c_black}/${c_green},-.${c_reset}
    ${c_blue}        ___     __   __   __   ___     ${c_green}/,-._.--~\'${c_reset}
    ${c_blue}  |\\ | |__  __ /  ` /  \\ |__) |__         ${c_yellow}}  {${c_reset}
    ${c_blue}  | \\| |       \\__, \\__/ |  \\ |___     ${c_green}\\`-._,-`-,${c_reset}
                                            ${c_green}`._,._,\'${c_reset}
    ${c_purple}  nf-core/hpcmeta v${workflow.manifest.version}${c_reset}
    -${c_dim}--------------------------------------------------${c_reset}-
    """.stripIndent()
}

def checkHostname(){
    def c_reset = params.monochrome_logs ? '' : "\033[0m"
    def c_white = params.monochrome_logs ? '' : "\033[0;37m"
    def c_red = params.monochrome_logs ? '' : "\033[1;91m"
    def c_yellow_bold = params.monochrome_logs ? '' : "\033[1;93m"
    if (params.hostnames) {
        def hostname = "hostname".execute().text.trim()
        params.hostnames.each { prof, hnames ->
            hnames.each { hname ->
                if (hostname.contains(hname) && !workflow.profile.contains(prof)) {
                    log.error "====================================================\n" +
                            "  ${c_red}WARNING!${c_reset} You are running with `-profile $workflow.profile`\n" +
                            "  but your machine hostname is ${c_white}'$hostname'${c_reset}\n" +
                            "  ${c_yellow_bold}It's highly recommended that you use `-profile $prof${c_reset}`\n" +
                            "============================================================"
                }
            }
        }
    }
}
